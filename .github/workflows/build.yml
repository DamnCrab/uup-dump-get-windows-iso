name: build
on:
  workflow_dispatch:
  schedule:
    #- cron: '0 * * * *' # hourly.
    #- cron: '0 0 17 * *' # every month, the 17th day.
    - cron: '0 2 * * *' # daily at 2 AM UTC.
jobs:
  build:
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: windows-11-24h2-zh-cn
          - name: windows-server-21h2-zh-cn
          - name: windows-10-22h2-zh-cn
    runs-on: windows-2022
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
      
      - name: Install dependencies
        run: pnpm install
      # log the available disk space, so we can inspect it later.
      # NB GitHub-hosted runners have limited available disk space.
      #    see https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
      - name: Show available disk space before build
        run: Get-PSDrive -PSProvider FileSystem
      # NB we are writting outside of the current working/job directory
      #    because it does not have sufficient available disk space.
      - name: Build
        run: node src/index.js --target "${{ matrix.name }}"
      - name: Show available disk space after build
        run: Get-PSDrive -PSProvider FileSystem
      - name: List output directory contents
        run: |
          Write-Host "Contents of c:/output/ directory:"
          if (Test-Path "c:/output/") {
            Get-ChildItem -Path "c:/output/" -Recurse | ForEach-Object {
              $relativePath = $_.FullName.Replace("c:/output/", "")
              if ($_.PSIsContainer) {
                Write-Host "📁 $relativePath/"
              } else {
                $size = [math]::Round($_.Length / 1MB, 2)
                Write-Host "📄 $relativePath ($size MB)"
              }
            }
          } else {
            Write-Host "❌ Directory c:/output/ does not exist"
          }
      - name: Build summary
        run: |
          $iso = Get-Content (Resolve-Path c:/output/*.json) | ConvertFrom-Json
          $artifactName = $iso.name

          Add-Content $env:GITHUB_STEP_SUMMARY @"
          | Property | Value |
          | :--- | :--- |
          | Name | $($iso.name) |
          | Build | $($iso.build) |
          | Checkum | $($iso.checksum) |
          $($iso.images | ForEach-Object {"| Image Name #$($_.index) | $($_.name) |"})
          | UUP dump | [$($iso.title)]($($iso.uupDump.downloadUrl)) |
          "@
          echo "ARTIFACT_NAME=$artifactName" >> $env:GITHUB_OUTPUT
        id: build_info
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build_info.outputs.ARTIFACT_NAME }}
          path: |
            c:/output/*.json
            c:/output/*.iso
            c:/output/*.iso.sha256.txt
  # NB this job will not actually produce a useful release, because in a
  #    github release a single file size cannot be above 2GB and these
  #    isos are 4GB+.
  # see https://docs.github.com/en/repositories/releasing-projects-on-github/about-releases#storage-and-bandwidth-quotas
  # see https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-binaries
  # see https://github.com/ncipollo/release-action/issues/110
  release:
    name: Release
    runs-on: ubuntu-22.04
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: output
      - name: Split large files into volumes
        run: |
          # Install 7z if not available
          sudo apt-get update && sudo apt-get install -y p7zip-full
          
          # Check available disk space
          echo "Available disk space:"
          df -h
          
          # Create compressed directory for split files
          mkdir -p compressed
          
          # Process each artifact directory independently
          for dir in output/*/; do
            if [ -d "$dir" ]; then
              artifact_name=$(basename "$dir")
              echo "Processing artifact: $artifact_name"
              
              # Create subdirectory for this artifact's compressed files
              mkdir -p "compressed/$artifact_name"
              
              # Check if ISO file exists and its size
              iso_file=$(find "$dir" -name "*.iso" | head -1)
              if [ -f "$iso_file" ]; then
                iso_size=$(stat -c%s "$iso_file")
                echo "ISO file size: $iso_size bytes"
                
                # Check available space before compression
                available_space=$(df --output=avail . | tail -1)
                echo "Available space: $available_space KB"
                
                # If ISO is larger than 1.8GB (leaving some margin), split it
                if [ $iso_size -gt 1932735283 ]; then
                  echo "ISO file is large, creating split archive..."
                  # Use lower compression level and smaller volumes for better reliability
                  # -mx=1 for fastest compression, -v1800m for 1.8GB volumes
                  if ! 7z a -t7z -mx=1 -v1800m "compressed/$artifact_name/${artifact_name}.7z" "$dir"*; then
                    echo "Error: Failed to create split archive for $artifact_name"
                    echo "Trying with even smaller volumes (1GB)..."
                    rm -f "compressed/$artifact_name/${artifact_name}.7z"*
                    if ! 7z a -t7z -mx=1 -v1000m "compressed/$artifact_name/${artifact_name}.7z" "$dir"*; then
                      echo "Error: Failed to create archive even with 1GB volumes"
                      # As fallback, just copy the files without compression
                      echo "Fallback: Copying files without compression"
                      cp "$dir"* "compressed/$artifact_name/"
                    else
                      echo "Created split archive with 1GB volumes for $artifact_name"
                    fi
                  else
                    echo "Created split archive for $artifact_name"
                  fi
                else
                  echo "ISO file is small enough, creating single archive..."
                  # Create single 7z archive in artifact subdirectory with low compression
                  if ! 7z a -t7z -mx=1 "compressed/$artifact_name/${artifact_name}.7z" "$dir"*; then
                    echo "Error: Failed to create single archive for $artifact_name"
                    echo "Fallback: Copying files without compression"
                    cp "$dir"* "compressed/$artifact_name/"
                  else
                    echo "Created single archive for $artifact_name"
                  fi
                fi
              else
                echo "No ISO file found in $artifact_name, creating single archive..."
                # Create single 7z archive for non-ISO artifacts in artifact subdirectory
                if ! 7z a -t7z -mx=1 "compressed/$artifact_name/${artifact_name}.7z" "$dir"*; then
                  echo "Error: Failed to create archive for $artifact_name"
                  echo "Fallback: Copying files without compression"
                  cp "$dir"* "compressed/$artifact_name/"
                else
                  echo "Created archive for $artifact_name"
                fi
              fi
              
              # Clean up to save space after each artifact
              echo "Cleaning up original files for $artifact_name to save space"
              rm -rf "$dir"
              
              # Check disk space after processing each artifact
              echo "Disk space after processing $artifact_name:"
              df -h
            fi
          done
          
          # List all created compressed files organized by artifact
          echo "Created compressed files:"
          find compressed/ -type f | sort
      - name: Generate release notes with artifact links
        run: |
          # Get build timestamp
          BUILD_DATE=$(date -u +"%Y-%m-%d %H:%M UTC")
          
          cat >release-notes.md <<EOF
          # 🖥️ Windows 中文版 ISO 构建
          
          **构建时间**: $BUILD_DATE  
          **构建编号**: #${{ github.run_number }}  
          **构建详情**: [GitHub Actions](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ## 📋 构建内容
          
          | 系统版本 | 构建号 | 文件类型 | 校验码 |
          |---------|--------|----------|--------|
          EOF
          
          # Add build information for each artifact
          for compressed_dir in compressed/*/; do
            if [ -d "$compressed_dir" ]; then
              artifact_name=$(basename "$compressed_dir")
              
              # Look for JSON file
              json_file=$(find "$compressed_dir" -name "*.json" | head -1)
              if [ ! -f "$json_file" ]; then
                json_file=$(find output/ -name "*${artifact_name}*.json" | head -1)
              fi
              
              if [ -f "$json_file" ]; then
                iso_info=$(cat "$json_file")
                iso_name=$(echo "$iso_info" | jq -r '.name')
                iso_build=$(echo "$iso_info" | jq -r '.build')
                iso_title=$(echo "$iso_info" | jq -r '.titleSafe // .title')
                iso_checksum=$(echo "$iso_info" | jq -r '.checksum')
                
                # Determine file type
                split_files=$(ls compressed/${artifact_name}/${artifact_name}.7z.* 2>/dev/null | wc -l)
                single_archive=$(ls compressed/${artifact_name}/${artifact_name}.7z 2>/dev/null | wc -l)
                raw_files=$(find compressed/${artifact_name}/ -name "*.iso" -o -name "*.json" -o -name "*.txt" | wc -l)
                
                if [ $split_files -gt 0 ]; then
                  file_type="分卷压缩 (${split_files} 个文件)"
                elif [ $single_archive -gt 0 ]; then
                  file_type="单个压缩包"
                elif [ $raw_files -gt 0 ]; then
                  file_type="原始文件"
                else
                  file_type="处理异常"
                fi
                
                echo "| **$iso_name** | $iso_build | $file_type | \`${iso_checksum:0:8}...\` |" >> release-notes.md
              fi
            fi
          done
          
          cat >>release-notes.md <<EOF
          
          ## 📥 下载方式
          
          ### 方式一：Release 下载（推荐）
          
          1. **点击下方 Assets 区域**展开文件列表
          2. **下载对应的文件**：
             - 分卷压缩：下载所有 `.7z.001`, `.7z.002` 等文件
             - 单个压缩：下载 `.7z` 文件
             - 原始文件：直接下载 `.iso` 文件
          3. **解压使用**：分卷和压缩文件需用 [7-Zip](https://www.7-zip.org/) 解压
          
          ### 方式二：Artifacts 下载
          
          1. **访问构建页面**：[GitHub Actions](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          2. **滚动到页面底部** Artifacts 区域
          3. **点击对应的构建名称**下载完整包
          4. **解压两次**：先解压下载的 zip，再解压内部的 7z 文件
          
          ## ⚠️ 重要提醒
          
          - **分卷文件**：必须下载同一 ISO 的所有分卷才能正确解压
          - **文件大小**：每个 ISO 约 4-5GB，请确保足够存储空间
          - **校验文件**：建议下载 `.sha256.txt` 验证文件完整性
          - **解压工具**：推荐使用 [7-Zip](https://www.7-zip.org/) 处理压缩文件
          
          ---
          
          💡 **首次使用建议选择方式一（Release 下载）**，操作更简单直接。
          EOF
      - name: Release
        uses: ncipollo/release-action@v1
        with:
          bodyFile: release-notes.md
          artifacts: compressed/*/*
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: false
          makeLatest: legacy
          omitBody: false
          omitBodyDuringUpdate: false
          omitDraftDuringUpdate: false
          omitName: false
          omitNameDuringUpdate: false
          omitPrereleaseDuringUpdate: false
          removeArtifacts: false
          replacesArtifacts: true
          skipIfReleaseExists: false
          updateOnlyUnreleased: false
          tag: "build-${{ github.run_number }}-${{ github.run_attempt }}"
