name: build
on:
  workflow_dispatch:
  schedule:
    #- cron: '0 * * * *' # hourly.
    #- cron: '0 0 17 * *' # every month, the 17th day.
    - cron: '0 2 * * *' # daily at 2 AM UTC.
jobs:
  build:
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: windows-11-24h2-zh-cn
          - name: windows-server-21h2-zh-cn
          - name: windows-10-22h2-zh-cn
    runs-on: windows-2022
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # log the available disk space, so we can inspect it later.
      # NB GitHub-hosted runners have limited available disk space.
      #    see https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
      - name: Show available disk space before build
        run: Get-PSDrive -PSProvider FileSystem
      # NB we are writting outside of the current working/job directory
      #    because it does not have sufficient available disk space.
      - name: Build
        run: pwsh uup-dump-get-windows-iso.ps1 ${{ matrix.name }} c:/output
      - name: Show available disk space after build
        run: Get-PSDrive -PSProvider FileSystem
      - name: List output directory contents
        run: |
          Write-Host "Contents of c:/output/ directory:"
          if (Test-Path "c:/output/") {
            Get-ChildItem -Path "c:/output/" -Recurse | ForEach-Object {
              $relativePath = $_.FullName.Replace("c:/output/", "")
              if ($_.PSIsContainer) {
                Write-Host "📁 $relativePath/"
              } else {
                $size = [math]::Round($_.Length / 1MB, 2)
                Write-Host "📄 $relativePath ($size MB)"
              }
            }
          } else {
            Write-Host "❌ Directory c:/output/ does not exist"
          }
      - name: Build summary
        run: |
          $iso = Get-Content (Resolve-Path c:/output/*.json) | ConvertFrom-Json
          $artifactName = $iso.name

          Add-Content $env:GITHUB_STEP_SUMMARY @"
          | Property | Value |
          | :--- | :--- |
          | Name | $($iso.name) |
          | Build | $($iso.build) |
          | Checkum | $($iso.checksum) |
          $($iso.images | ForEach-Object {"| Image Name #$($_.index) | $($_.name) |"})
          | UUP dump | [$($iso.title)]($($iso.uupDump.downloadUrl)) |
          "@
          echo "ARTIFACT_NAME=$artifactName" >> $env:GITHUB_OUTPUT
        id: build_info
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build_info.outputs.ARTIFACT_NAME }}
          path: |
            c:/output/*.json
            c:/output/*.iso
            c:/output/*.iso.sha256.txt
  # NB this job will not actually produce a useful release, because in a
  #    github release a single file size cannot be above 2GB and these
  #    isos are 4GB+.
  # see https://docs.github.com/en/repositories/releasing-projects-on-github/about-releases#storage-and-bandwidth-quotas
  # see https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-binaries
  # see https://github.com/ncipollo/release-action/issues/110
  release:
    name: Release
    runs-on: ubuntu-22.04
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: output
      - name: Split large files into volumes
        run: |
          # Install 7z if not available
          sudo apt-get update && sudo apt-get install -y p7zip-full
          
          # Create compressed directory for split files
          mkdir -p compressed
          
          # Process each artifact directory independently
          for dir in output/*/; do
            if [ -d "$dir" ]; then
              artifact_name=$(basename "$dir")
              echo "Processing artifact: $artifact_name"
              
              # Create subdirectory for this artifact's compressed files
              mkdir -p "compressed/$artifact_name"
              
              # Check if ISO file exists and its size
              iso_file=$(find "$dir" -name "*.iso" | head -1)
              if [ -f "$iso_file" ]; then
                iso_size=$(stat -c%s "$iso_file")
                echo "ISO file size: $iso_size bytes"
                
                # If ISO is larger than 1.8GB (leaving some margin), split it
                if [ $iso_size -gt 1932735283 ]; then
                  echo "ISO file is large, creating split archive..."
                  # Create split 7z archive with 1.9GB volumes in artifact subdirectory
                  7z a -t7z -v1900m "compressed/$artifact_name/${artifact_name}.7z" "$dir"*
                  echo "Created split archive for $artifact_name"
                else
                  echo "ISO file is small enough, creating single archive..."
                  # Create single 7z archive in artifact subdirectory
                  7z a -t7z "compressed/$artifact_name/${artifact_name}.7z" "$dir"*
                  echo "Created single archive for $artifact_name"
                fi
              else
                echo "No ISO file found in $artifact_name, creating single archive..."
                # Create single 7z archive for non-ISO artifacts in artifact subdirectory
                7z a -t7z "compressed/$artifact_name/${artifact_name}.7z" "$dir"*
                echo "Created archive for $artifact_name"
              fi
            fi
          done
          
          # List all created compressed files organized by artifact
          echo "Created compressed files:"
          find compressed/ -type f | sort
      - name: Generate release notes with artifact links
        run: |
          cat >release-notes.md <<EOF
          # Windows ISO 构建完成
          
          本次构建包含以下中文版 Windows ISO 文件：
          
          ## 📦 下载链接
          
          由于 GitHub Release 单个文件大小限制为 2GB，大型 ISO 文件已被分卷压缩：
          
          EOF
          
          # Add artifact links for each build
          for dir in output/*/; do
            if [ -d "$dir" ]; then
              artifact_name=$(basename "$dir")
              json_file=$(find "$dir" -name "*.json" | head -1)
              if [ -f "$json_file" ]; then
                iso_info=$(cat "$json_file")
                iso_name=$(echo "$iso_info" | jq -r '.name')
                iso_build=$(echo "$iso_info" | jq -r '.build')
                iso_title=$(echo "$iso_info" | jq -r '.titleSafe // .title')
                echo "### 🖥️ $iso_title" >> release-notes.md
                echo "- **版本**: $iso_build" >> release-notes.md
                
                # Check if files were split in the artifact's subdirectory
                split_files=$(ls compressed/${artifact_name}/${artifact_name}.7z.* 2>/dev/null | wc -l)
                if [ $split_files -gt 0 ]; then
                  echo "- **文件**: 分卷压缩包 (${split_files} 个分卷)" >> release-notes.md
                  echo "- **说明**: 下载 ${artifact_name} 目录下的所有分卷后使用 7-Zip 解压" >> release-notes.md
                else
                  echo "- **文件**: 单个压缩包" >> release-notes.md
                  echo "- **说明**: 下载 ${artifact_name}.7z 并使用 7-Zip 解压" >> release-notes.md
                fi
                echo "" >> release-notes.md
              fi
            fi
          done
          
          cat >>release-notes.md <<EOF
          
          ## ℹ️ 使用说明
          
          ### 对于分卷压缩文件：
          1. 下载对应ISO的所有分卷文件（如 windows-11-24h2-zh-cn.7z.001, windows-11-24h2-zh-cn.7z.002 等）
          2. 将同一ISO的所有分卷文件放在同一目录下
          3. 使用 7-Zip 解压第一个分卷文件（.7z.001）
          4. 7-Zip 会自动处理所有分卷并解压出完整的 ISO 文件
          
          ### 对于单个压缩文件：
          1. 下载对应的 .7z 文件
          2. 使用 7-Zip 解压即可获得 ISO 文件
          
          ## ⚠️ 注意事项
          
          - 每个ISO的分卷压缩文件必须全部下载才能正确解压
          - 不同ISO的分卷文件不能混用
          - ISO 文件大小通常为 4GB+，请确保有足够的存储空间
          - 建议解压后使用 SHA256 校验文件验证文件完整性
          - 这些是最新的官方 Windows 更新版本
          
          ## 🔗 相关链接
          
          - [7-Zip 下载地址](https://www.7-zip.org/)
          - [GitHub Actions 构建详情](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [存储和带宽限制说明](https://docs.github.com/en/repositories/releasing-projects-on-github/about-releases#storage-and-bandwidth-quotas)
          EOF
      - name: Release
        uses: ncipollo/release-action@v1
        with:
          bodyFile: release-notes.md
          artifacts: compressed/*/*
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: false
          makeLatest: legacy
          omitBody: false
          omitBodyDuringUpdate: false
          omitDraftDuringUpdate: false
          omitName: false
          omitNameDuringUpdate: false
          omitPrereleaseDuringUpdate: false
          removeArtifacts: false
          replacesArtifacts: true
          skipIfReleaseExists: false
          updateOnlyUnreleased: false
          tag: "build-${{ github.run_number }}-${{ github.run_attempt }}"
