name: build
on:
  workflow_dispatch:
  schedule:
    #- cron: '0 * * * *' # hourly.
    #- cron: '0 0 17 * *' # every month, the 17th day.
    - cron: '0 2 * * *' # daily at 2 AM UTC.
jobs:
  build:
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: windows-11-24h2-zh-cn
          - name: windows-server-21h2-zh-cn
          - name: windows-10-22h2-zh-cn
    runs-on: windows-2022
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # log the available disk space, so we can inspect it later.
      # NB GitHub-hosted runners have limited available disk space.
      #    see https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
      - name: Show available disk space before build
        run: Get-PSDrive -PSProvider FileSystem
      # NB we are writting outside of the current working/job directory
      #    because it does not have sufficient available disk space.
      - name: Build
        run: pwsh uup-dump-get-windows-iso.ps1 ${{ matrix.name }} c:/output
      - name: Show available disk space after build
        run: Get-PSDrive -PSProvider FileSystem
      - name: Build summary and set artifact name
        run: |
          $iso = Get-Content (Resolve-Path c:/output/*.json) | ConvertFrom-Json
          $isoFile = Get-ChildItem c:/output/*.iso | Select-Object -First 1
          # Use titleSafe for artifact name if available, otherwise use file basename
          $artifactName = if ($iso.PSObject.Properties.Name -contains 'titleSafe' -and ![string]::IsNullOrWhiteSpace($iso.titleSafe)) {
              $iso.titleSafe
          } else {
              $isoFile.BaseName
          }
          Add-Content $env:GITHUB_STEP_SUMMARY @"
          | Property | Value |
          | :--- | :--- |
          | Name | $($iso.name) |
          | Build | $($iso.build) |
          | Checkum | $($iso.checksum) |
          $($iso.images | ForEach-Object {"| Image Name #$($_.index) | $($_.name) |"})
          | UUP dump | [$($iso.title)]($($iso.uupDump.downloadUrl)) |
          | Artifact Name | $artifactName |
          "@
          # Set artifact name as output for use in upload step
          echo "ARTIFACT_NAME=$artifactName" >> $env:GITHUB_OUTPUT
        id: build_info
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build_info.outputs.ARTIFACT_NAME }}
          path: |
            c:/output/*.json
            c:/output/*.iso
            c:/output/*.iso.sha256.txt
  # NB this job will not actually produce a useful release, because in a
  #    github release a single file size cannot be above 2GB and these
  #    isos are 4GB+.
  # see https://docs.github.com/en/repositories/releasing-projects-on-github/about-releases#storage-and-bandwidth-quotas
  # see https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github#distributing-large-binaries
  # see https://github.com/ncipollo/release-action/issues/110
  release:
    name: Release
    runs-on: ubuntu-22.04
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: output
      - name: Generate release notes with artifact links
        run: |
          cat >release-notes.md <<EOF
          # Windows ISO 构建完成
          
          本次构建包含以下中文版 Windows ISO 文件：
          
          ## 📦 下载链接
          
          由于 GitHub Release 单个文件大小限制为 2GB，而 ISO 文件通常为 4GB+，请通过以下 Artifacts 链接下载：
          
          EOF
          
          # Add artifact links for each build
          for dir in output/*/; do
            if [ -d "$dir" ]; then
              artifact_name=$(basename "$dir")
              json_file=$(find "$dir" -name "*.json" | head -1)
              if [ -f "$json_file" ]; then
                iso_info=$(cat "$json_file")
                iso_name=$(echo "$iso_info" | jq -r '.name')
                iso_build=$(echo "$iso_info" | jq -r '.build')
                iso_title=$(echo "$iso_info" | jq -r '.titleSafe // .title')
                echo "### 🖥️ $iso_title" >> release-notes.md
                echo "- **版本**: $iso_build" >> release-notes.md
                echo "- **下载**: [📁 $artifact_name](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> release-notes.md
                echo "" >> release-notes.md
              fi
            fi
          done
          
          cat >>release-notes.md <<EOF
          
          ## ℹ️ 使用说明
          
          1. 点击上方的 Artifacts 链接
          2. 在 GitHub Actions 页面中找到对应的构建产物
          3. 下载包含 ISO 文件、JSON 元数据和 SHA256 校验文件的压缩包
          
          ## ⚠️ 注意事项
          
          - ISO 文件大小通常为 4GB+，请确保有足够的存储空间
          - 建议下载后使用 SHA256 校验文件验证文件完整性
          - 这些是最新的官方 Windows 更新版本
          
          ## 🔗 相关链接
          
          - [GitHub Actions 构建详情](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [存储和带宽限制说明](https://docs.github.com/en/repositories/releasing-projects-on-github/about-releases#storage-and-bandwidth-quotas)
          - [大文件分发指南](https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github#distributing-large-binaries)
          EOF
      - name: Release
        uses: ncipollo/release-action@v1
        with:
          bodyFile: release-notes.md
          artifacts: output/*/*
          token: ${{ secrets.GITHUB_TOKEN }}
