# Auto scrape UUP Dump data using Playwright
# 使用 Playwright 自动抓取 UUP Dump 数据
name: scrape

on:
  workflow_dispatch: # Manual trigger / 手动触发
  schedule:
    - cron: '0 2 * * *' # Run at 02:00 UTC daily / 每日 UTC 02:00 运行

jobs:
  # Scrape UUP Dump data / 抓取 UUP Dump 数据
  scrape:
    runs-on: ubuntu-latest
    steps:
      # Checkout code / 检出代码
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Install pnpm / 安装 pnpm
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false

      # Setup Node.js / 设置 Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'pnpm'
          cache-dependency-path: 'playwright/pnpm-lock.yaml'

      # Install Playwright dependencies / 安装 Playwright 依赖
      - name: Install Playwright dependencies
        run: |
          cd playwright
          pnpm install
          npx playwright install chromium

      # Run Playwright scraping / 运行 Playwright 抓取
      - name: Run Playwright scraping
        run: |
          cd playwright
          pnpm run scrape

      # Check for changes / 检查是否有变更
      - name: Check for changes
        id: changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      # Commit and push changes / 提交并推送变更
      - name: Commit and push changes
        if: steps.changes.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add playwright/output/
          git commit -m "🤖 Auto update UUP Dump data - $(date -u +"%Y-%m-%d %H:%M UTC")"
          git push

      # Upload artifacts / 上传构建产物
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: uupdump-data-${{ github.run_number }}
          path: |
            playwright/output/*.json
          retention-days: 7 # Keep artifacts for 7 days / 构建产物保留7天

      # Create summary / 创建摘要
      - name: Create summary
        run: |
          echo "## 📊 UUP Dump 数据抓取完成" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**抓取时间**: $(date -u +"%Y-%m-%d %H:%M UTC")" >> $GITHUB_STEP_SUMMARY
          echo "**工作流运行**: [查看详情](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ -f "playwright/output/uupdump-data.json" ]]; then
            echo "### 📁 生成的文件" >> $GITHUB_STEP_SUMMARY
            echo "- \`playwright/output/uupdump-data.json\` - 主数据文件" >> $GITHUB_STEP_SUMMARY
            echo "- \`playwright/output/uupdump-types-summary.json\` - 分类汇总文件" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show file sizes / 显示文件大小
            echo "### 📏 文件大小" >> $GITHUB_STEP_SUMMARY
            ls -lh playwright/output/*.json | awk '{print "- " $9 ": " $5}' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Show summary stats if types summary exists / 如果分类汇总存在则显示统计信息
            if [[ -f "playwright/output/uupdump-types-summary.json" ]]; then
              echo "### 📈 数据统计" >> $GITHUB_STEP_SUMMARY
              node -e "
                const fs = require('fs');
                const data = JSON.parse(fs.readFileSync('playwright/output/uupdump-types-summary.json', 'utf8'));
                console.log('| 版本类型 | 数量 |');
                console.log('|---------|------|');
                Object.entries(data.countsByType).forEach(([type, count]) => {
                  console.log(\`| \${type} | \${count} |\`);
                });
              " >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ 未找到生成的数据文件" >> $GITHUB_STEP_SUMMARY
          fi